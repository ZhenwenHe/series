package cn.edu.cug.cs.gtl.series.common.pax;

import cn.edu.cug.cs.gtl.io.Storable;


import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InputStream;

/**
 * transformable interval object (TIO) point
 */
public class TIOPoint implements Storable {

    private static final long serialVersionUID = 5991616484737030623L;

    private double angle;
    private double value;

    /**
     * create a new Series Object from a byte array,
     * this byte array must be generated by storeToByteArray() function
     *
     * @param bytes
     * @return
     * @throws IOException
     */
    public static TIOPoint of(byte[] bytes) throws IOException {
        TIOPoint s = new TIOPoint();
        s.loadFromByteArray(bytes);
        return s;
    }

    /**
     * create a new Series Object from a input stream,
     * it must be generated by write() function
     *
     * @param inputStream
     * @return
     * @throws IOException
     */
    public static TIOPoint of(InputStream inputStream) throws IOException {
        TIOPoint s = new TIOPoint();
        s.read(inputStream);
        return s;
    }

    /**
     * @param angle
     * @param value
     * @return
     */
    public static TIOPoint of(double angle, double value) {
        return new TIOPoint(angle, value);
    }

    /**
     *
     */
    TIOPoint() {
        this.angle = 0;
        this.value = 0;
    }

    /**
     * @param angle
     * @param value
     */
    TIOPoint(double angle, double value) {
        this.angle = angle;
        this.value = value;
    }

    /**
     * @return
     */
    public double getAngle() {
        return angle;
    }

    /**
     * @param angle
     */
    public void setAngle(double angle) {
        this.angle = angle;
    }

    /**
     * @return
     */
    public double getValue() {
        return value;
    }

    /**
     * @param value
     */
    public void setValue(double value) {
        this.value = value;
    }

    /**
     * 对象深拷贝
     *
     * @return 返回新的对象
     */
    @Override
    public Object clone() {
        return new TIOPoint(this.angle, this.value);
    }

    /**
     * 从存储对象中加载数据，填充本对象
     *
     * @param in 表示可以读取的存储对象，可能是内存、文件、管道等
     * @return 执行成功返回true，否则返回false
     * @throws IOException
     */
    @Override
    public boolean load(DataInput in) throws IOException {
        this.angle = in.readDouble();
        this.value = in.readDouble();
        return true;
    }

    /**
     * 将本对象写入存储对象中，存储对象可能是内存、文件、管道等
     *
     * @param out ，表示可以写入的存储对象，可能是内存、文件、管道等
     * @return 执行成功返回true，否则返回false
     * @throws IOException
     */
    @Override
    public boolean store(DataOutput out) throws IOException {
        out.writeDouble(this.angle);
        out.writeDouble(this.value);
        return true;
    }
}
